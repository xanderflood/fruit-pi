// Code generated by counterfeiter. DO NOT EDIT.
package sdkfakes

import (
	"sync"

	"github.com/xanderflood/fruit-pi-server/sdk"
)

type FakeFrontmatterer struct {
	FrontmatterStub        func(method, url string, body interface{}, response interface{}) (status int, err error)
	frontmatterMutex       sync.RWMutex
	frontmatterArgsForCall []struct {
		method   string
		url      string
		body     interface{}
		response interface{}
	}
	frontmatterReturns struct {
		result1 int
		result2 error
	}
	frontmatterReturnsOnCall map[int]struct {
		result1 int
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFrontmatterer) Frontmatter(method string, url string, body interface{}, response interface{}) (status int, err error) {
	fake.frontmatterMutex.Lock()
	ret, specificReturn := fake.frontmatterReturnsOnCall[len(fake.frontmatterArgsForCall)]
	fake.frontmatterArgsForCall = append(fake.frontmatterArgsForCall, struct {
		method   string
		url      string
		body     interface{}
		response interface{}
	}{method, url, body, response})
	fake.recordInvocation("Frontmatter", []interface{}{method, url, body, response})
	fake.frontmatterMutex.Unlock()
	if fake.FrontmatterStub != nil {
		return fake.FrontmatterStub(method, url, body, response)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.frontmatterReturns.result1, fake.frontmatterReturns.result2
}

func (fake *FakeFrontmatterer) FrontmatterCallCount() int {
	fake.frontmatterMutex.RLock()
	defer fake.frontmatterMutex.RUnlock()
	return len(fake.frontmatterArgsForCall)
}

func (fake *FakeFrontmatterer) FrontmatterArgsForCall(i int) (string, string, interface{}, interface{}) {
	fake.frontmatterMutex.RLock()
	defer fake.frontmatterMutex.RUnlock()
	return fake.frontmatterArgsForCall[i].method, fake.frontmatterArgsForCall[i].url, fake.frontmatterArgsForCall[i].body, fake.frontmatterArgsForCall[i].response
}

func (fake *FakeFrontmatterer) FrontmatterReturns(result1 int, result2 error) {
	fake.FrontmatterStub = nil
	fake.frontmatterReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeFrontmatterer) FrontmatterReturnsOnCall(i int, result1 int, result2 error) {
	fake.FrontmatterStub = nil
	if fake.frontmatterReturnsOnCall == nil {
		fake.frontmatterReturnsOnCall = make(map[int]struct {
			result1 int
			result2 error
		})
	}
	fake.frontmatterReturnsOnCall[i] = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeFrontmatterer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.frontmatterMutex.RLock()
	defer fake.frontmatterMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFrontmatterer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ sdk.Frontmatterer = new(FakeFrontmatterer)
