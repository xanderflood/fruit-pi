// Code generated by counterfeiter. DO NOT EDIT.
package sdkfakes

import (
	"sync"

	"github.com/xanderflood/fruit-pi-server/sdk"
)

type FakeClient struct {
	InitializeStub        func(config []byte) (uuid string, err error)
	initializeMutex       sync.RWMutex
	initializeArgsForCall []struct {
		config []byte
	}
	initializeReturns struct {
		result1 string
		result2 error
	}
	initializeReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	UpdateStub        func(uuid string, config []byte) error
	updateMutex       sync.RWMutex
	updateArgsForCall []struct {
		uuid   string
		config []byte
	}
	updateReturns struct {
		result1 error
	}
	updateReturnsOnCall map[int]struct {
		result1 error
	}
	FetchStub        func(uuid string) (config []byte, err error)
	fetchMutex       sync.RWMutex
	fetchArgsForCall []struct {
		uuid string
	}
	fetchReturns struct {
		result1 []byte
		result2 error
	}
	fetchReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) Initialize(config []byte) (uuid string, err error) {
	var configCopy []byte
	if config != nil {
		configCopy = make([]byte, len(config))
		copy(configCopy, config)
	}
	fake.initializeMutex.Lock()
	ret, specificReturn := fake.initializeReturnsOnCall[len(fake.initializeArgsForCall)]
	fake.initializeArgsForCall = append(fake.initializeArgsForCall, struct {
		config []byte
	}{configCopy})
	fake.recordInvocation("Initialize", []interface{}{configCopy})
	fake.initializeMutex.Unlock()
	if fake.InitializeStub != nil {
		return fake.InitializeStub(config)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.initializeReturns.result1, fake.initializeReturns.result2
}

func (fake *FakeClient) InitializeCallCount() int {
	fake.initializeMutex.RLock()
	defer fake.initializeMutex.RUnlock()
	return len(fake.initializeArgsForCall)
}

func (fake *FakeClient) InitializeArgsForCall(i int) []byte {
	fake.initializeMutex.RLock()
	defer fake.initializeMutex.RUnlock()
	return fake.initializeArgsForCall[i].config
}

func (fake *FakeClient) InitializeReturns(result1 string, result2 error) {
	fake.InitializeStub = nil
	fake.initializeReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) InitializeReturnsOnCall(i int, result1 string, result2 error) {
	fake.InitializeStub = nil
	if fake.initializeReturnsOnCall == nil {
		fake.initializeReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.initializeReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Update(uuid string, config []byte) error {
	var configCopy []byte
	if config != nil {
		configCopy = make([]byte, len(config))
		copy(configCopy, config)
	}
	fake.updateMutex.Lock()
	ret, specificReturn := fake.updateReturnsOnCall[len(fake.updateArgsForCall)]
	fake.updateArgsForCall = append(fake.updateArgsForCall, struct {
		uuid   string
		config []byte
	}{uuid, configCopy})
	fake.recordInvocation("Update", []interface{}{uuid, configCopy})
	fake.updateMutex.Unlock()
	if fake.UpdateStub != nil {
		return fake.UpdateStub(uuid, config)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.updateReturns.result1
}

func (fake *FakeClient) UpdateCallCount() int {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return len(fake.updateArgsForCall)
}

func (fake *FakeClient) UpdateArgsForCall(i int) (string, []byte) {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return fake.updateArgsForCall[i].uuid, fake.updateArgsForCall[i].config
}

func (fake *FakeClient) UpdateReturns(result1 error) {
	fake.UpdateStub = nil
	fake.updateReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) UpdateReturnsOnCall(i int, result1 error) {
	fake.UpdateStub = nil
	if fake.updateReturnsOnCall == nil {
		fake.updateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) Fetch(uuid string) (config []byte, err error) {
	fake.fetchMutex.Lock()
	ret, specificReturn := fake.fetchReturnsOnCall[len(fake.fetchArgsForCall)]
	fake.fetchArgsForCall = append(fake.fetchArgsForCall, struct {
		uuid string
	}{uuid})
	fake.recordInvocation("Fetch", []interface{}{uuid})
	fake.fetchMutex.Unlock()
	if fake.FetchStub != nil {
		return fake.FetchStub(uuid)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.fetchReturns.result1, fake.fetchReturns.result2
}

func (fake *FakeClient) FetchCallCount() int {
	fake.fetchMutex.RLock()
	defer fake.fetchMutex.RUnlock()
	return len(fake.fetchArgsForCall)
}

func (fake *FakeClient) FetchArgsForCall(i int) string {
	fake.fetchMutex.RLock()
	defer fake.fetchMutex.RUnlock()
	return fake.fetchArgsForCall[i].uuid
}

func (fake *FakeClient) FetchReturns(result1 []byte, result2 error) {
	fake.FetchStub = nil
	fake.fetchReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) FetchReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.FetchStub = nil
	if fake.fetchReturnsOnCall == nil {
		fake.fetchReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.fetchReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.initializeMutex.RLock()
	defer fake.initializeMutex.RUnlock()
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	fake.fetchMutex.RLock()
	defer fake.fetchMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ sdk.Client = new(FakeClient)
