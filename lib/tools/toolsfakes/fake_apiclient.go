// Code generated by counterfeiter. DO NOT EDIT.
package toolsfakes

import (
	"context"
	"sync"

	"github.com/xanderflood/fruit-pi-server/lib/api"
	"github.com/xanderflood/fruit-pi/lib/tools"
)

type FakeAPIClient struct {
	ConfigureDeviceStub        func(context.Context, string, string) (api.Device, error)
	configureDeviceMutex       sync.RWMutex
	configureDeviceArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	configureDeviceReturns struct {
		result1 api.Device
		result2 error
	}
	configureDeviceReturnsOnCall map[int]struct {
		result1 api.Device
		result2 error
	}
	GetDeviceConfigStub        func(context.Context) (api.Device, error)
	getDeviceConfigMutex       sync.RWMutex
	getDeviceConfigArgsForCall []struct {
		arg1 context.Context
	}
	getDeviceConfigReturns struct {
		result1 api.Device
		result2 error
	}
	getDeviceConfigReturnsOnCall map[int]struct {
		result1 api.Device
		result2 error
	}
	GetDeviceTokenForStub        func(context.Context, string) (api.Device, error)
	getDeviceTokenForMutex       sync.RWMutex
	getDeviceTokenForArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getDeviceTokenForReturns struct {
		result1 api.Device
		result2 error
	}
	getDeviceTokenForReturnsOnCall map[int]struct {
		result1 api.Device
		result2 error
	}
	InsertReadingStub        func(context.Context, float64, float64) (api.Reading, error)
	insertReadingMutex       sync.RWMutex
	insertReadingArgsForCall []struct {
		arg1 context.Context
		arg2 float64
		arg3 float64
	}
	insertReadingReturns struct {
		result1 api.Reading
		result2 error
	}
	insertReadingReturnsOnCall map[int]struct {
		result1 api.Reading
		result2 error
	}
	RegisterDeviceStub        func(context.Context, string, string) (api.Device, error)
	registerDeviceMutex       sync.RWMutex
	registerDeviceArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	registerDeviceReturns struct {
		result1 api.Device
		result2 error
	}
	registerDeviceReturnsOnCall map[int]struct {
		result1 api.Device
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAPIClient) ConfigureDevice(arg1 context.Context, arg2 string, arg3 string) (api.Device, error) {
	fake.configureDeviceMutex.Lock()
	ret, specificReturn := fake.configureDeviceReturnsOnCall[len(fake.configureDeviceArgsForCall)]
	fake.configureDeviceArgsForCall = append(fake.configureDeviceArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("ConfigureDevice", []interface{}{arg1, arg2, arg3})
	fake.configureDeviceMutex.Unlock()
	if fake.ConfigureDeviceStub != nil {
		return fake.ConfigureDeviceStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.configureDeviceReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAPIClient) ConfigureDeviceCallCount() int {
	fake.configureDeviceMutex.RLock()
	defer fake.configureDeviceMutex.RUnlock()
	return len(fake.configureDeviceArgsForCall)
}

func (fake *FakeAPIClient) ConfigureDeviceCalls(stub func(context.Context, string, string) (api.Device, error)) {
	fake.configureDeviceMutex.Lock()
	defer fake.configureDeviceMutex.Unlock()
	fake.ConfigureDeviceStub = stub
}

func (fake *FakeAPIClient) ConfigureDeviceArgsForCall(i int) (context.Context, string, string) {
	fake.configureDeviceMutex.RLock()
	defer fake.configureDeviceMutex.RUnlock()
	argsForCall := fake.configureDeviceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeAPIClient) ConfigureDeviceReturns(result1 api.Device, result2 error) {
	fake.configureDeviceMutex.Lock()
	defer fake.configureDeviceMutex.Unlock()
	fake.ConfigureDeviceStub = nil
	fake.configureDeviceReturns = struct {
		result1 api.Device
		result2 error
	}{result1, result2}
}

func (fake *FakeAPIClient) ConfigureDeviceReturnsOnCall(i int, result1 api.Device, result2 error) {
	fake.configureDeviceMutex.Lock()
	defer fake.configureDeviceMutex.Unlock()
	fake.ConfigureDeviceStub = nil
	if fake.configureDeviceReturnsOnCall == nil {
		fake.configureDeviceReturnsOnCall = make(map[int]struct {
			result1 api.Device
			result2 error
		})
	}
	fake.configureDeviceReturnsOnCall[i] = struct {
		result1 api.Device
		result2 error
	}{result1, result2}
}

func (fake *FakeAPIClient) GetDeviceConfig(arg1 context.Context) (api.Device, error) {
	fake.getDeviceConfigMutex.Lock()
	ret, specificReturn := fake.getDeviceConfigReturnsOnCall[len(fake.getDeviceConfigArgsForCall)]
	fake.getDeviceConfigArgsForCall = append(fake.getDeviceConfigArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	fake.recordInvocation("GetDeviceConfig", []interface{}{arg1})
	fake.getDeviceConfigMutex.Unlock()
	if fake.GetDeviceConfigStub != nil {
		return fake.GetDeviceConfigStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getDeviceConfigReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAPIClient) GetDeviceConfigCallCount() int {
	fake.getDeviceConfigMutex.RLock()
	defer fake.getDeviceConfigMutex.RUnlock()
	return len(fake.getDeviceConfigArgsForCall)
}

func (fake *FakeAPIClient) GetDeviceConfigCalls(stub func(context.Context) (api.Device, error)) {
	fake.getDeviceConfigMutex.Lock()
	defer fake.getDeviceConfigMutex.Unlock()
	fake.GetDeviceConfigStub = stub
}

func (fake *FakeAPIClient) GetDeviceConfigArgsForCall(i int) context.Context {
	fake.getDeviceConfigMutex.RLock()
	defer fake.getDeviceConfigMutex.RUnlock()
	argsForCall := fake.getDeviceConfigArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAPIClient) GetDeviceConfigReturns(result1 api.Device, result2 error) {
	fake.getDeviceConfigMutex.Lock()
	defer fake.getDeviceConfigMutex.Unlock()
	fake.GetDeviceConfigStub = nil
	fake.getDeviceConfigReturns = struct {
		result1 api.Device
		result2 error
	}{result1, result2}
}

func (fake *FakeAPIClient) GetDeviceConfigReturnsOnCall(i int, result1 api.Device, result2 error) {
	fake.getDeviceConfigMutex.Lock()
	defer fake.getDeviceConfigMutex.Unlock()
	fake.GetDeviceConfigStub = nil
	if fake.getDeviceConfigReturnsOnCall == nil {
		fake.getDeviceConfigReturnsOnCall = make(map[int]struct {
			result1 api.Device
			result2 error
		})
	}
	fake.getDeviceConfigReturnsOnCall[i] = struct {
		result1 api.Device
		result2 error
	}{result1, result2}
}

func (fake *FakeAPIClient) GetDeviceTokenFor(arg1 context.Context, arg2 string) (api.Device, error) {
	fake.getDeviceTokenForMutex.Lock()
	ret, specificReturn := fake.getDeviceTokenForReturnsOnCall[len(fake.getDeviceTokenForArgsForCall)]
	fake.getDeviceTokenForArgsForCall = append(fake.getDeviceTokenForArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("GetDeviceTokenFor", []interface{}{arg1, arg2})
	fake.getDeviceTokenForMutex.Unlock()
	if fake.GetDeviceTokenForStub != nil {
		return fake.GetDeviceTokenForStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getDeviceTokenForReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAPIClient) GetDeviceTokenForCallCount() int {
	fake.getDeviceTokenForMutex.RLock()
	defer fake.getDeviceTokenForMutex.RUnlock()
	return len(fake.getDeviceTokenForArgsForCall)
}

func (fake *FakeAPIClient) GetDeviceTokenForCalls(stub func(context.Context, string) (api.Device, error)) {
	fake.getDeviceTokenForMutex.Lock()
	defer fake.getDeviceTokenForMutex.Unlock()
	fake.GetDeviceTokenForStub = stub
}

func (fake *FakeAPIClient) GetDeviceTokenForArgsForCall(i int) (context.Context, string) {
	fake.getDeviceTokenForMutex.RLock()
	defer fake.getDeviceTokenForMutex.RUnlock()
	argsForCall := fake.getDeviceTokenForArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAPIClient) GetDeviceTokenForReturns(result1 api.Device, result2 error) {
	fake.getDeviceTokenForMutex.Lock()
	defer fake.getDeviceTokenForMutex.Unlock()
	fake.GetDeviceTokenForStub = nil
	fake.getDeviceTokenForReturns = struct {
		result1 api.Device
		result2 error
	}{result1, result2}
}

func (fake *FakeAPIClient) GetDeviceTokenForReturnsOnCall(i int, result1 api.Device, result2 error) {
	fake.getDeviceTokenForMutex.Lock()
	defer fake.getDeviceTokenForMutex.Unlock()
	fake.GetDeviceTokenForStub = nil
	if fake.getDeviceTokenForReturnsOnCall == nil {
		fake.getDeviceTokenForReturnsOnCall = make(map[int]struct {
			result1 api.Device
			result2 error
		})
	}
	fake.getDeviceTokenForReturnsOnCall[i] = struct {
		result1 api.Device
		result2 error
	}{result1, result2}
}

func (fake *FakeAPIClient) InsertReading(arg1 context.Context, arg2 float64, arg3 float64) (api.Reading, error) {
	fake.insertReadingMutex.Lock()
	ret, specificReturn := fake.insertReadingReturnsOnCall[len(fake.insertReadingArgsForCall)]
	fake.insertReadingArgsForCall = append(fake.insertReadingArgsForCall, struct {
		arg1 context.Context
		arg2 float64
		arg3 float64
	}{arg1, arg2, arg3})
	fake.recordInvocation("InsertReading", []interface{}{arg1, arg2, arg3})
	fake.insertReadingMutex.Unlock()
	if fake.InsertReadingStub != nil {
		return fake.InsertReadingStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.insertReadingReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAPIClient) InsertReadingCallCount() int {
	fake.insertReadingMutex.RLock()
	defer fake.insertReadingMutex.RUnlock()
	return len(fake.insertReadingArgsForCall)
}

func (fake *FakeAPIClient) InsertReadingCalls(stub func(context.Context, float64, float64) (api.Reading, error)) {
	fake.insertReadingMutex.Lock()
	defer fake.insertReadingMutex.Unlock()
	fake.InsertReadingStub = stub
}

func (fake *FakeAPIClient) InsertReadingArgsForCall(i int) (context.Context, float64, float64) {
	fake.insertReadingMutex.RLock()
	defer fake.insertReadingMutex.RUnlock()
	argsForCall := fake.insertReadingArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeAPIClient) InsertReadingReturns(result1 api.Reading, result2 error) {
	fake.insertReadingMutex.Lock()
	defer fake.insertReadingMutex.Unlock()
	fake.InsertReadingStub = nil
	fake.insertReadingReturns = struct {
		result1 api.Reading
		result2 error
	}{result1, result2}
}

func (fake *FakeAPIClient) InsertReadingReturnsOnCall(i int, result1 api.Reading, result2 error) {
	fake.insertReadingMutex.Lock()
	defer fake.insertReadingMutex.Unlock()
	fake.InsertReadingStub = nil
	if fake.insertReadingReturnsOnCall == nil {
		fake.insertReadingReturnsOnCall = make(map[int]struct {
			result1 api.Reading
			result2 error
		})
	}
	fake.insertReadingReturnsOnCall[i] = struct {
		result1 api.Reading
		result2 error
	}{result1, result2}
}

func (fake *FakeAPIClient) RegisterDevice(arg1 context.Context, arg2 string, arg3 string) (api.Device, error) {
	fake.registerDeviceMutex.Lock()
	ret, specificReturn := fake.registerDeviceReturnsOnCall[len(fake.registerDeviceArgsForCall)]
	fake.registerDeviceArgsForCall = append(fake.registerDeviceArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("RegisterDevice", []interface{}{arg1, arg2, arg3})
	fake.registerDeviceMutex.Unlock()
	if fake.RegisterDeviceStub != nil {
		return fake.RegisterDeviceStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.registerDeviceReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAPIClient) RegisterDeviceCallCount() int {
	fake.registerDeviceMutex.RLock()
	defer fake.registerDeviceMutex.RUnlock()
	return len(fake.registerDeviceArgsForCall)
}

func (fake *FakeAPIClient) RegisterDeviceCalls(stub func(context.Context, string, string) (api.Device, error)) {
	fake.registerDeviceMutex.Lock()
	defer fake.registerDeviceMutex.Unlock()
	fake.RegisterDeviceStub = stub
}

func (fake *FakeAPIClient) RegisterDeviceArgsForCall(i int) (context.Context, string, string) {
	fake.registerDeviceMutex.RLock()
	defer fake.registerDeviceMutex.RUnlock()
	argsForCall := fake.registerDeviceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeAPIClient) RegisterDeviceReturns(result1 api.Device, result2 error) {
	fake.registerDeviceMutex.Lock()
	defer fake.registerDeviceMutex.Unlock()
	fake.RegisterDeviceStub = nil
	fake.registerDeviceReturns = struct {
		result1 api.Device
		result2 error
	}{result1, result2}
}

func (fake *FakeAPIClient) RegisterDeviceReturnsOnCall(i int, result1 api.Device, result2 error) {
	fake.registerDeviceMutex.Lock()
	defer fake.registerDeviceMutex.Unlock()
	fake.RegisterDeviceStub = nil
	if fake.registerDeviceReturnsOnCall == nil {
		fake.registerDeviceReturnsOnCall = make(map[int]struct {
			result1 api.Device
			result2 error
		})
	}
	fake.registerDeviceReturnsOnCall[i] = struct {
		result1 api.Device
		result2 error
	}{result1, result2}
}

func (fake *FakeAPIClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.configureDeviceMutex.RLock()
	defer fake.configureDeviceMutex.RUnlock()
	fake.getDeviceConfigMutex.RLock()
	defer fake.getDeviceConfigMutex.RUnlock()
	fake.getDeviceTokenForMutex.RLock()
	defer fake.getDeviceTokenForMutex.RUnlock()
	fake.insertReadingMutex.RLock()
	defer fake.insertReadingMutex.RUnlock()
	fake.registerDeviceMutex.RLock()
	defer fake.registerDeviceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAPIClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ tools.APIClient = new(FakeAPIClient)
